pipeline {
    agent none

    environment {
        PROJECT_ZONE = "${JENK_INT_IT_ZONE}"
        PROJECT_ID = "${JENK_INT_IT_PROJECT_ID}"
        STAGING_CLUSTER = "${JENK_INT_IT_STAGING}"
        PROD_CLUSTER = "${JENK_INT_IT_PROD}"
        BUILD_CONTEXT_BUCKET = "${JENK_INT_IT_BUCKET}"
		APP_NAME = "QRService"
        BUILD_CONTEXT = "${APP_NAME}-${BUILD_ID}.tar.gz"
        GCR_IMAGE = "eu.gcr.io/${PROJECT_ID}/qrservice-lns:${BUILD_ID}"
        APP_JAR = "${APP_NAME}.jar"
    }

    stages {
        stage("Build and test") {
	    agent {
    	    	kubernetes {
      		    cloud 'kubernetes'
      		    label 'maven-pod'
      		    yamlFile 'jenkins/maven-pod.yaml'
		}
	    }
	    steps {
	    	container('maven') {
		        // build
	    	    sh "mvn clean package"

		        // run tests
		        sh "mvn verify"

				withSonarQubeEnv(credentialsId: 'jenkins', installationName: 'sonar') { 
                    sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
                }
		        
				// bundle the generated artifact    
		        sh "cp target/${APP_NAME}-*.jar $APP_JAR"

		        // archive the build context for kaniko			    
			sh "tar --exclude='./.git' -zcvf /tmp/$BUILD_CONTEXT ."
		        sh "mv /tmp/$BUILD_CONTEXT ."
		        step([$class: 'ClassicUploadStep', credentialsId: env.JENK_INT_IT_CRED_ID, bucket: "gs://${BUILD_CONTEXT_BUCKET}", pattern: env.BUILD_CONTEXT])
		}
	    }
	}
	stage("Publish Image") {
            agent {
    	    	kubernetes {
      		    cloud 'kubernetes'
      		    label 'kaniko-pod'
      		    yamlFile 'jenkins/kaniko-pod.yaml'
		}
	    }
	    environment {
                PATH = "/busybox:/kaniko:$PATH"
      	    }
	    steps {
	        container(name: 'kaniko', shell: '/busybox/sh') {
		    sh '''#!/busybox/sh
		    /kaniko/executor -f `pwd`/Dockerfile -c `pwd` --context="gs://${BUILD_CONTEXT_BUCKET}/${BUILD_CONTEXT}" --destination="${GCR_IMAGE}" --build-arg JAR_FILE="${APP_JAR}"
		    '''
		}
	    }
	}
	stage("Deploy to Cluster") {
            agent {
    	        kubernetes {
      		    cloud 'kubernetes'
      		    label 'gke-deploy'
		    yamlFile 'jenkins/gke-deploy-pod.yaml'
		}
            }
	    steps{
			container('gke-deploy') {
		    	sh "sed -i s#gcr.io/wipro-gcn-lbg-poc/qrservice#${GCR_IMAGE}#g cicd/k8s/deployments/authdemo-backend-canary.yaml"
            	step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.STAGING_CLUSTER, location: env.PROJECT_ZONE, manifestPattern: 'cicd/k8s/deployments/authdemo-backend-canary.yaml', credentialsId: env.JENK_INT_IT_CRED_ID, verifyDeployments: true])
				step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.STAGING_CLUSTER, location: env.PROJECT_ZONE, manifestPattern: 'cicd/k8s/services/authdemo-backend-canary.yaml', credentialsId: env.JENK_INT_IT_CRED_ID, verifyDeployments: true])
			}
        }
	}
    }
}
